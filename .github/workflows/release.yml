name: Release
defaults:
  run:
    shell: bash

permissions:
  contents: write
  pull-requests: write

on:
  release:
    types: [created]

jobs:          
  release:
    name: Build and Upload Release Assets
    runs-on: ubuntu-latest
    if: ${{ github.event.release.target_commitish == 'main' }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install WASI workload
        run: dotnet workload install wasi-experimental

      - name: Build WASM plugin
        run: |
          dotnet publish WasmRunner -c release --output dist/
          ./scripts/wasm/copy_plugin_to.sh dist
          
      - name: Get release info
        run: |
          set -e
          
          # Get the tag name from the release event
          RELEASE_TAG=${{ github.event.release.tag_name }}
          
          # Get the previous tag for changelog
          LATEST_TAG=$(git describe --tags --abbrev=0 ${RELEASE_TAG}^ 2>/dev/null || echo "")
          
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          
      - name: Calculate sha256
        run: |
          SHA256_HASH=$(sha256sum plugin.wasm | awk '{ print $1 }')
          echo "SHA256_HASH=${SHA256_HASH}" >> $GITHUB_ENV
          echo "The calculated sha256 is $SHA256_HASH"

      - name: Upload assets and update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          LATEST_TAG=${{ env.LATEST_TAG }}
          RELEASE_TAG=${{ env.RELEASE_TAG }}
          SHA256_HASH=${{ env.SHA256_HASH }}

          # Generate changelog if we have a previous tag
          if [[ -n "${LATEST_TAG}" ]]; then
            CHANGE_LOG=$(git --no-pager log ${LATEST_TAG}..${RELEASE_TAG} --pretty=format:'%h - %an, %ar : %s')
          else
            CHANGE_LOG="Initial release"
          fi

          # change file name to convention
          mv plugin.wasm sqlc-gen-csharp.wasm

          # Upload the WASM file to the existing release
          gh release upload ${RELEASE_TAG} sqlc-gen-csharp.wasm --clobber

          # Get current release notes and append configuration info
          CURRENT_NOTES=$(gh release view ${RELEASE_TAG} --json body --jq '.body')
          
          # Build additional notes by concatenating strings to avoid YAML parsing issues
          CONFIG_SECTION="## Configuration example"$'\n'
          CONFIG_SECTION+='```yaml'$'\n'
          CONFIG_SECTION+="version: '2'"$'\n'
          CONFIG_SECTION+="plugins:"$'\n'
          CONFIG_SECTION+="- name: csharp"$'\n'
          CONFIG_SECTION+="  wasm:"$'\n'
          CONFIG_SECTION+="    url: https://github.com/chikei-development/sqlc-gen-csharp/releases/download/${RELEASE_TAG}/sqlc-gen-csharp.wasm"$'\n'
          CONFIG_SECTION+="    sha256: ${SHA256_HASH}"$'\n'
          CONFIG_SECTION+='```'$'\n'$'\n'
          
          SHA_SECTION="## Release sha256"$'\n'
          SHA_SECTION+="\`${SHA256_HASH}\`"$'\n'$'\n'
          
          CHANGELOG_SECTION="## Changelog"$'\n'
          CHANGELOG_SECTION+="${CHANGE_LOG}"$'\n'
          
          ADDITIONAL_NOTES="${CONFIG_SECTION}${SHA_SECTION}${CHANGELOG_SECTION}"

          # Update the release with the additional notes
          gh release edit ${RELEASE_TAG} --notes "${CURRENT_NOTES}${ADDITIONAL_NOTES}"