name: Release
defaults:
  run:
    shell: bash

permissions:
  contents: write
  pull-requests: write

on:
  release:
    types: [created]

jobs:
  wait-for-build:
    name: Wait for Build Workflow
    runs-on: ubuntu-latest
    if: ${{ github.event.release.target_commitish == 'main' }}
    outputs:
      build-conclusion: ${{ steps.wait-for-build.outputs.conclusion }}
    steps:
      - name: Wait for Build workflow to complete
        id: wait-for-build
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'Build'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success,failure,cancelled,skipped

      - name: Check Build workflow status
        if: steps.wait-for-build.outputs.conclusion != 'success'
        run: |
          echo "::error::Build workflow failed with conclusion: ${{ steps.wait-for-build.outputs.conclusion }}"
          echo "Cannot proceed with release until Build workflow succeeds."
          exit 1

  release:
    name: Download and Upload Release Assets
    runs-on: ubuntu-latest
    needs: [wait-for-build]
    if: ${{ github.event.release.target_commitish == 'main' && needs.wait-for-build.outputs.build-conclusion == 'success' }}
    steps:
      - name: Add build status comment to release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createReleaseComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: 'üîÑ Waiting for Build workflow to complete before processing release artifacts...'
            });

      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download WASM artifact from Build workflow
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          name: wasm-file
          commit: ${{ github.sha }}
          if_no_artifact_found: fail

      - name: Get release info
        run: |
          set -e

          # Get the tag name from the release event
          RELEASE_TAG=${{ github.event.release.tag_name }}

          # Get the previous tag for changelog
          LATEST_TAG=$(git describe --tags --abbrev=0 ${RELEASE_TAG}^ 2>/dev/null || echo "")

          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Calculate sha256
        run: |
          SHA256_HASH=$(sha256sum plugin.wasm | awk '{ print $1 }')
          echo "SHA256_HASH=${SHA256_HASH}" >> $GITHUB_ENV
          echo "The calculated sha256 is $SHA256_HASH"

      - name: Setup .NET for docs generation
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Generate and commit updated docs
        run: |
          # Generate updated documentation
          ./docs/scripts/generate_all_docs.sh
          
          # Check if there are any changes to commit
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add docs/
            git commit -m "Update auto-generated docs for release ${RELEASE_TAG}"
            
            # Move the tag to point to the new commit with updated docs
            git tag -d ${RELEASE_TAG}
            git tag ${RELEASE_TAG}
            git push origin main
            git push origin ${RELEASE_TAG} --force
            
            echo "Documentation updated, committed, and tag moved to include docs"
          else
            echo "No documentation changes to commit"
          fi

      - name: Upload assets and update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          LATEST_TAG=${{ env.LATEST_TAG }}
          RELEASE_TAG=${{ env.RELEASE_TAG }}
          SHA256_HASH=${{ env.SHA256_HASH }}

          # Generate changelog if we have a previous tag
          if [[ -n "${LATEST_TAG}" ]]; then
            CHANGE_LOG=$(git --no-pager log ${LATEST_TAG}..${RELEASE_TAG} --pretty=format:'%h - %an, %ar : %s')
          else
            CHANGE_LOG="Initial release"
          fi

          # change file name to convention
          mv plugin.wasm sqlc-gen-csharp.wasm

          # Upload the WASM file to the existing release
          gh release upload ${RELEASE_TAG} sqlc-gen-csharp.wasm --clobber

          # Get current release notes and append configuration info
          CURRENT_NOTES=$(gh release view ${RELEASE_TAG} --json body --jq '.body')

          # Build additional notes by concatenating strings to avoid YAML parsing issues
          CONFIG_SECTION="## Configuration example"$'\n'
          CONFIG_SECTION+='```yaml'$'\n'
          CONFIG_SECTION+="version: '2'"$'\n'
          CONFIG_SECTION+="plugins:"$'\n'
          CONFIG_SECTION+="- name: csharp"$'\n'
          CONFIG_SECTION+="  wasm:"$'\n'
          CONFIG_SECTION+="    url: https://github.com/chikei-development/sqlc-gen-csharp/releases/download/${RELEASE_TAG}/sqlc-gen-csharp.wasm"$'\n'
          CONFIG_SECTION+="    sha256: ${SHA256_HASH}"$'\n'
          CONFIG_SECTION+='```'$'\n'$'\n'

          SHA_SECTION="## Release sha256"$'\n'
          SHA_SECTION+="\`${SHA256_HASH}\`"$'\n'$'\n'

          CHANGELOG_SECTION="## Changelog"$'\n'
          CHANGELOG_SECTION+="${CHANGE_LOG}"$'\n'

          ADDITIONAL_NOTES="${CONFIG_SECTION}${SHA_SECTION}${CHANGELOG_SECTION}"

          # Update the release with the additional notes
          gh release edit ${RELEASE_TAG} --notes "${CURRENT_NOTES}${ADDITIONAL_NOTES}"

      - name: Add success comment to release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createReleaseComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: '‚úÖ Release artifacts have been successfully uploaded! The WASM plugin is now available for download.'
            });

  release-failure:
    name: Handle Build Failure
    runs-on: ubuntu-latest
    needs: [wait-for-build]
    if: ${{ github.event.release.target_commitish == 'main' && needs.wait-for-build.outputs.build-conclusion != 'success' }}
    steps:
      - name: Comment on release failure
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ needs.wait-for-build.outputs.build-conclusion }}';
            await github.rest.repos.createReleaseComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `‚ùå Cannot process release: Build workflow ${conclusion}. Please check the [Build workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/build.yml) and ensure it passes before creating a release.`
            });
