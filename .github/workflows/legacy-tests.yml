name: .Net Framework Tests (Legacy)
defaults:
  run:
    shell: bash

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
    paths:
      - "**"
      - "!**.md"

jobs:
  # As this can run only on Windows machines, these tests should run only in CI
  end2end-tests: 
    name: End-to-End Tests
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
          
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Setup Visual Studio for .NET Framework
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: 'latest'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2.0.1
        
      - name: Start PostgreSQL Container
        shell: powershell
        run: |
          docker run -d --name postgres-test `
            --platform linux/amd64 `
            -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} `
            -e POSTGRES_USER=${{ env.POSTGRES_USER }} `
            -e POSTGRES_DB=${{ env.TESTS_DB }} `
            -p 5432:5432 `
            postgres:16
          
          # Wait for PostgreSQL to be ready
          do {
            Start-Sleep -Seconds 2
            $result = docker exec postgres-test pg_isready -U ${{ env.POSTGRES_USER }}
            Write-Host "Waiting for PostgreSQL... $result"
          } while ($LASTEXITCODE -ne 0)
          
      - name: Start MySQL Container
        shell: powershell
        run: |
          docker run -d --name mysql-test `
            --platform linux/amd64 `
            -e MYSQL_ROOT_PASSWORD=root `
            -e MYSQL_DATABASE=${{ env.TESTS_DB }} `
            -p 3306:3306 `
            mysql:8.0
          
          # Wait for MySQL to be ready
          do {
            Start-Sleep -Seconds 3
            $result = docker exec mysql-test mysqladmin ping -h localhost --silent
            Write-Host "Waiting for MySQL... Exit code: $LASTEXITCODE"
          } while ($LASTEXITCODE -ne 0)
        
      - name: Setup Database Clients
        shell: powershell  
        run: |
          choco install postgresql --params '/Password:${{ env.POSTGRES_PASSWORD }}' --no-progress -y
          choco install mysql.utilities --no-progress -y
          
      - name: Init PostgreSQL Schema
        shell: powershell
        run: |
          docker exec -i postgres-test psql -U ${{ env.POSTGRES_USER }} -d ${{ env.TESTS_DB }} < examples/config/postgresql/types/schema.sql
          docker exec -i postgres-test psql -U ${{ env.POSTGRES_USER }} -d ${{ env.TESTS_DB }} < examples/config/postgresql/authors/schema.sql
          
      - name: Restore and Build Test Projects
        shell: powershell
        run: |
          Get-ChildItem -Path examples -Recurse -Filter *.csproj |
            Where-Object { $_.FullName -like '*Legacy*' } |
            ForEach-Object { nuget restore $_.FullName }
          nuget restore ./end2end/EndToEndCommon/EndToEndCommon.csproj
          nuget restore ./end2end/EndToEndTestsLegacy/EndToEndTestsLegacy.csproj
          msbuild.exe ./end2end/EndToEndTestsLegacy/EndToEndTestsLegacy.csproj -p:Configuration=Release -p:TargetFramework=net8.0
          
      - name: Init MySQL Schema
        shell: powershell
        run: |
          docker exec mysql-test mysql -u root -proot -e "SET GLOBAL local_infile=1;"
          docker exec -i mysql-test mysql -u root -proot ${{ env.TESTS_DB }} < examples/config/mysql/types/schema.sql
          docker exec -i mysql-test mysql -u root -proot ${{ env.TESTS_DB }} < examples/config/mysql/authors/schema.sql    

      - name: Run Tests
        shell: powershell
        run: |
          $path = vswhere -latest -products * -requires Microsoft.VisualStudio.Workload.ManagedDesktop Microsoft.VisualStudio.Workload.Web -requiresAny -property installationPath
          $path = join-path $path 'Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe'
          & $path ./end2end/EndToEndTestsLegacy/bin/Release/net472/EndToEndTestsLegacy.dll

      - name: Cleanup Docker Containers
        if: always()
        shell: powershell
        run: |
          docker stop postgres-test mysql-test
          docker rm postgres-test mysql-test